
<launch>

  <!-- Params settings -->
  <arg name="landing" default="false" /> 
  <arg name="ps3_ctrl" default="false" />
  <arg name="using_lidar" default="false" />
  <arg name="using_gnss" default="false" />
  <arg name="using_lord_imu" default="false" />
  <arg name="localization_stacks" default="false" />
  <arg name="data_adjustments" default="false" />
  <arg name="vx" default="0.5" />
  <arg name="omega" default="1.3" />

  <group if="$(arg using_lidar)">
    <!-- SICK Nav245 implementing -->
    <include file="$(find sick_scan)/launch/sick_nav_2xx.launch"/>
    <!-- Transformation to see cloud-data in rviz -->
    <node pkg="tf" type="static_transform_publisher" name="laser_base_to_laser" args="0 0 0 0 0 0 1 base_laser laser 50"  />
    <node pkg="tf" type="static_transform_publisher" name="base_laser_to_base_link" args="0.24 0 0 0 0 0 1 base_link base_laser  50"  />
  </group>

  <group if="$(arg using_gnss)">
    <!-- DURO GNSS implementing -->
    <include file="/home/saun/outDataSampling/src/duro_gps_driver/launch/duro_example.launch" />
    <!-- Transformation duro to base_link -->
    <node pkg="tf" type="static_transform_publisher" name="duro_to_base_link" args="0.24 0 0.47 0 0 0 1 base_link duro  50"  />
  </group>

  <group if="$(arg using_lord_imu)">
    <!-- LORD MICROSTRAIN 3DM-GX5-AHRS implementing -->
    <include file="/home/saun/outDataSampling/src/microstrain_inertial/microstrain_inertial_driver/launch/microstrain.launch" />
  </group>

  <group if="$(arg landing)">
    <!-- Serials connection with STM32 MCU -->
    <include file="$(find connect_node)/launch/connect_node.launch" />

    <!-- Kinematic Equation solving -->
    <include file="$(find inverse_kinematic)/launch/inverse_kinematic.launch"/>
  </group>
  
  <group if="$(arg ps3_ctrl)"> 
    <!-- PS3 controlling -->
    <node pkg="joy" type="joy_node" name="joy_node" required="true" output = "screen" />
    <node pkg="ps3joy" type="ps3" name="ps3" required="true" output = "screen" >
      <param name="command_vel" value="/cmd_vel"/>
      <param name="linear_x" type="double" value="$(arg vx)" />
      <param name="angular_z" type="double" value="$(arg omega)" />
    </node>
  </group>
  
  <group if="$(arg localization_stacks)">
    <!-- EKF -->
    <!-- <node name="odomtransformer" pkg="navigation" type="odomtransformer.py" output="screen">
      <param name="odom_input" value="/odometry/global" />
      <param name="tf_output" value="/base_link" />
    </node> -->

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"> 
      <rosparam command="load" file="$(find combine_data)/param/ekf.yaml" />
      <remap from="odometry/filtered" to="odometry/global" />
    </node>

    <!-- NavSat Transformation -->
    <node name="navsat_transform_node" pkg="robot_localization" type="navsat_transform_node" output="screen" >
      <rosparam command="load" file="$(find combine_data)/param/navsat.yaml" />

      <!-- Subscriptions -->
      <remap from="imu/data" to="/nav/filtered_imu/data" />
      <!-- <remap from="imu/data" to="/IMU" /> -->
      <remap from="gps/fix" to="/fix" />
      <remap from="odometry/filtered" to="odometry/global" />

      <!-- Publications -->
      <remap from="gps/filtered" to="gps/filtered" />
      <remap from="odometry/gps" to="odometry/gps" />
    </node>
  </group>

  <group if="$(arg data_adjustments)">
    <!-- EKF -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"> 
      <rosparam command="load" file="$(find combine_data)/param/ekf_simplified.yaml" />
      <remap from="odometry/filtered" to="odometry/global_ad" />
    </node>
  </group>

  <!-- <node pkg="rviz" type="rviz" name="rviz" args="-d $(find ekf)/rviz/ekf.rviz" required="true"/> -->

</launch>
